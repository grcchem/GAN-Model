from keras.preprocessing.sequence import pad_sequences
import os 
os.environ['KERAS_BACKEND'] = 'theano'
import numpy as np
np.warnings.filterwarnings('ignore')
from scipy import trapz
from scipy.io import loadmat
from keras.models import load_model
import numpy as np
import random
from pathlib import Path
from scipy.interpolate import interp1d
import matplotlib.pyplot as plt
#%%
def norma_resample(input_data, data_size):
    input_data = (input_data - min(input_data))/max(input_data - min(input_data))
    x = np.arange(0,(input_data).size)
    new_x = np.arange(0,input_data.size-1,input_data.size/data_size)
    input_data = np.transpose(interp1d(x,input_data.reshape(len(input_data)))(new_x))
    input_data = input_data.reshape(len(input_data),1)
    input_data = pad_sequences(np.transpose(input_data),maxlen=data_size,dtype= 'float64',padding='post', truncating='post', value = (input_data)[-1])
    immatrix_p = input_data.reshape(data_size)
    
    return immatrix_p

#%%
random.seed(7)
np.random.seed(7)

ReconModel = load_model(os.path.join(Path.cwd(), 'AI model', 'Reconstruction.hdf5'))
Examples_flow_folder = os.path.join(Path.cwd(),'Examples', 'Flow')
Examples_pressure_folder = os.path.join(Path.cwd(),'Examples', 'Pressure')

#%%
for fname in os.listdir(Examples_flow_folder):
    if fname.endswith('.mat'):
        print('now reading' + fname)
        temp_flow = loadmat(os.path.join(Examples_flow_folder,fname))['temp_flow']
        temp_pressure = loadmat(os.path.join(Examples_pressure_folder,fname.replace('F', 'P')))['temp_pressure']
                    # flow inspiration & expiration
        Fth = 5
        
        flow_inspi_loc_ends = np.argmax(temp_flow[1+Fth:-1]<= 0) # add 5 data points in future so that will avoid the 1st digit as negative
        flow_inspi = temp_flow[0:flow_inspi_loc_ends+Fth]
        
        while (len(flow_inspi) <= 10):
            #print(len(flow_head))
            flow_inspi_loc_ends = np.argmax(temp_flow[1+Fth:-1]<= 0) # add 5 data points in future so that will avoid the 1st digit as negative
            flow_inspi = temp_flow[0:flow_inspi_loc_ends+Fth]
            Fth = Fth +1
        
        flow_inspi_loc_ends = np.argmax(temp_flow[1+Fth:-1]<= 0) # add 5 data points in future so that will avoid the 1st digit as negative
        flow_inspi = temp_flow[0:flow_inspi_loc_ends+Fth]
        
        flow_expi = temp_flow[flow_inspi_loc_ends+1+Fth::]
        flow_expi_loc_starts = np.argmin(flow_expi)
        flow_expi = flow_expi[flow_expi_loc_starts::]
        
        #% Pressure Inspiration and expiration
        pressure_inspi = temp_pressure[0:flow_inspi_loc_ends+Fth]
        
        temp = norma_resample(pressure_inspi,64)
        
        reconstructed = ReconModel.predict(temp.reshape(1,64,1))
        reconstructed = reconstructed.reshape(64) # Normalized output (0-1)
        Error = max((temp.reshape(64,) - reconstructed.reshape(64,)))
        reconstructed = reconstructed +Error
        max_recon = max(reconstructed)
        reconstructed = reconstructed/max_recon # to normalize
        normalized_AB = temp.reshape(64,)/max_recon
        VI = 1 - (abs(trapz(reconstructed) - trapz(normalized_AB)))/trapz(reconstructed) # VI metric
        magAB = trapz(normalized_AB)/trapz(reconstructed) *100 #Magnitude of AB
        
        plt.figure()
        plt.plot(temp)
        plt.plot(reconstructed)
